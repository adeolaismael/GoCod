# This example demonstrates deploying a MongoDB service using Docker on an instance, exposing it on port 27017.
# Caution: For actual IRL(In Real Life) deployments, ensure robust and secure configurations beyond this basic setup.
# To deploy a real database, you should be more robust and safe than the current configurations.
# TODO: Develop a robust method to install and run MongoDB, focusing on:
# - Maintainability: The setup should be easily adaptable, allowing for updates like changing the MongoDB version or adding users.
# - Readability: Use modularity to improve clarity and minimize code duplication, utilizing external files and variables where possible.
# - Persistence: Ensure data retention despite configuration updates (e.g., version changes).
# - Backup (Optional but recommended): Incorporate easy backup solutions, such as leveraging GCP External disks with Terraform and scripting backups in Ansible.
# Note: The current setup lacks data persistence, meaning data is lost when the MongoDB instance is updated.

- hosts: mongo_cluster
  become: true

  vars:
    # MongoDB Configuration
    mongo_version: "6"  # Easily changeable MongoDB version
    mongo_port: "27017"  # MongoDB port
    mongo_user: "teamizaga"  # MongoDB admin user
    mongo_password: "izagamongodb"  # MongoDB password
    mongo_backup_dir: "/var/backups/mongodb"  # Backup directory

  tasks:
    
    # MongoDB Configuration
    - name: Create a volume for MongoDB data
      docker_volume:
        name: mongo_data
        state: present

    - name: Start MongoDB container
      docker_container:
        name: mongo
        image: "mongo:{{ mongo_version }}"
        state: started
        restart_policy: always
        ports:
          - "{{ mongo_port }}:27017"
        volumes:
          - "mongo_data:/data/db"
        env:
          MONGO_INITDB_ROOT_USERNAME: "{{ mongo_user }}"
          MONGO_INITDB_ROOT_PASSWORD: "{{ mongo_password }}"
      register: mongo_container

    - name: Check if MongoDB is running
      command: 'docker exec mongo bash -c "mongo --eval \"db.runCommand({ ping: 1 })\""'
      register: mongo_ping
      retries: 5
      delay: 10
      until: mongo_ping is succeeded
      when: mongo_container.changed

    # MongoDB Backup Directory Creation
    - name: Create backup directory for MongoDB
      file:
        path: "{{ mongo_backup_dir }}"
        state: directory
        mode: '0755'

    # MongoDB Backup Script
    - name: Copy MongoDB Backup script
      copy:
        content: |
          #!/bin/bash
          mongodump --host localhost --port 27017 --out {{ mongo_backup_dir }}/backup_$(date +%Y%m%d%H%M)
        dest: /usr/local/bin/mongo_backup.sh
        mode: '0755'

    # Schedule MongoDB Backup
    - name: Schedule MongoDB backup
      cron:
        name: "MongoDB backup"
        job: "/usr/local/bin/mongo_backup.sh > /dev/null 2>&1"
        special_time: daily
