# This example demonstrates deploying a Neo4j service using Docker on an instance, exposing it on default ports.
# Caution: For actual IRL (In Real Life) deployments, ensure robust and secure configurations beyond this basic setup.
# To deploy a real database, you should be more robust and safe than the current configurations.
# TODO: Develop a robust method to install and run Neo4j, focusing on:
# - Maintainability: The setup should be easily adaptable, allowing for updates like changing the Neo4j version or adding users.
# - Readability: Use modularity to improve clarity and minimize code duplication, utilizing external files and variables where possible.
# - Persistence: Ensure data retention despite configuration updates (e.g., version changes).
# - Backup (Optional but recommended): Incorporate easy backup solutions.

- hosts: neo4j_cluster
  become: true

  vars:
    # Neo4j Configuration
    neo4j_version: "latest"  # Easily changeable Neo4j version
    neo4j_http_port: "7474"  # Neo4j HTTP port
    neo4j_https_port: "7473" # Neo4j HTTPS port
    neo4j_bolt_port: "7687"  # Neo4j BOLT port
    neo4j_username: "neo4j"  # Neo4j admin user (to be replaced with real username)
    neo4j_password: "izaga_neo4j"  # Neo4j password (to be replaced with real password)
    neo4j_data_dir: "/var/lib/neo4j/data"  # Neo4j data directory
    neo4j_logs_dir: "/var/lib/neo4j/logs"  # Neo4j logs directory
    neo4j_backup_dir: "/var/backups/neo4j"  # Backup directory

  tasks:
    - name: Create a volume for Neo4j data
      docker_volume:
        name: neo4j_data
        state: present

    - name: Create a volume for Neo4j logs
      docker_volume:
        name: neo4j_logs
        state: present

    - name: Start Neo4j container
      docker_container:
        name: neo4j
        image: "neo4j:{{ neo4j_version }}"
        state: started
        restart_policy: always
        ports:
          - "{{ neo4j_http_port }}:7474"
          - "{{ neo4j_https_port }}:7473"
          - "{{ neo4j_bolt_port }}:7687"
        volumes:
          - "neo4j_data:/data"
          - "neo4j_logs:/logs"
        env:
          NEO4J_AUTH: "{{ neo4j_username }}/{{ neo4j_password }}"
      register: neo4j_container

    - name: Check if Neo4j is running
      uri:
        url: "http://localhost:{{ neo4j_http_port }}"
        method: GET
        status_code: 200
      register: neo4j_running
      retries: 5
      delay: 10
      until: neo4j_running is succeeded
      when: neo4j_container.changed

    # Neo4j Backup Directory Creation
    - name: Create backup directory for Neo4j
      file:
        path: "{{ neo4j_backup_dir }}"
        state: directory
        mode: '0755'

    # Neo4j Backup Script
    - name: Copy Neo4j Backup script
      copy:
        content: |
          #!/bin/bash
          # Neo4j backup commands go here
          # Example: neo4j-admin backup --backup-dir={{ neo4j_backup_dir }} --name=graph.db-backup
        dest: /usr/local/bin/neo4j_backup.sh
        mode: '0755'

    # Schedule Neo4j Backup
    - name: Schedule Neo4j backup
      cron:
        name: "Neo4j backup"
        job: "/usr/local/bin/neo4j_backup.sh > /dev/null 2>&1"
        special_time: daily
